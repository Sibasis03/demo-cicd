pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build')
    }

    environment {
        GIT_COMMIT_HASH = sh(script: "git log -n 1 --pretty=format:'%H'", returnStdout: true).trim()
        DOCKER_IMAGE = "sibasis03/java-app:${GIT_COMMIT_HASH}"
        DOCKER_REGISTRY_CREDENTIALS_ID = 'dockerhub-credentials'
    }

    stages {
        
        stage('checkout') {
            steps {
                script {
                    git branch: "${params.BRANCH_NAME}", url: 'https://gitlab.com/sibasisgouda18/gitlab-ci.git', credentialsId: 'gitlab-https-credentials'
                }
            }
        }
        
        stage('build & test') {
            steps {
                script {
                    try {
                        sh 'mvn clean package'
                    } catch (Exception e) {
                        echo "Build and test failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
        
        stage('building docker image') {
            steps {
                script {
                    try {
                        echo "Git Commit Hash: ${GIT_COMMIT_HASH}"
                        echo "Docker image tag: ${DOCKER_IMAGE}"
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    } catch (Exception e) {
                        echo "Docker build failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('pushing docker image') {
            steps {
                script {
                    try {
                        docker.withRegistry('https://index.docker.io/v1/', DOCKER_REGISTRY_CREDENTIALS_ID) {
                        docker.image(DOCKER_IMAGE).push()
                        }
                    } catch (Exception e) {
                        echo "Docker login or push failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
    }
}
